import pandas as pd
import numpy as np
import yfinance as yf
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
import matplotlib.dates as mdates

# ------------------------------
# Data Structures: Hash Map w/ Separate Chaining
# ------------------------------
class HashNode:
    """Node for separate chaining in the hash map."""
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.next = None


class HashMap:
    """Custom hash map implementation with separate chaining."""
    def __init__(self, capacity=100):
        self.capacity = capacity
        self.size = 0
        self.buckets = [None] * self.capacity

    def _hash(self, key):
        """Hash function."""
        return hash(key) % self.capacity

    def put(self, key, value):
        """Insert or update a key-value pair."""
        index = self._hash(key)
        head = self.buckets[index]

        # Update if key exists
        while head:
            if head.key == key:
                head.value = value
                return
            head = head.next

        # Insert a new node
        new_node = HashNode(key, value)
        new_node.next = self.buckets[index]
        self.buckets[index] = new_node
        self.size += 1

    def get(self, key):
        """Retrieve a value by key."""
        index = self._hash(key)
        head = self.buckets[index]
        while head:
            if head.key == key:
                return head.value
            head = head.next
        return None  # Key not found

    def display(self):
        """Display the hash map."""
        for i, node in enumerate(self.buckets):
            print(f"Bucket {i}:", end=" ")
            while node:
                print(f"({node.key}: {node.value})", end=" -> ")
                node = node.next
            print()
# ------------------------------
# Data Structures: Adjacency List-Based Directed Graph
# ------------------------------
class Graph:
    """Custom adjacency list implementation."""
    def __init__(self, num_nodes):
        self.num_nodes = num_nodes
        self.adj_list = [[] for _ in range(num_nodes)]

    def add_edge(self, from_node, to_node):
        """Add a directed edge."""
        self.adj_list[from_node].append(to_node)

    def display(self):
        """Display the graph."""
        for i, neighbors in enumerate(self.adj_list):
            print(f"Node {i}: {neighbors}")
# ------------------------------
# Build Graph and Hash Map
# ------------------------------
def build_graph_and_hashmap(data):
    num_nodes = len(data)
    price_graph = Graph(num_nodes)
    price_hashmap = HashMap()

    for i in range(num_nodes):
        price = data.iloc[i]['Close']
        change = data.iloc[i]['Daily Change'] if i > 0 else 0

        # Add node and edges to the graph
        if i > 0:
            price_graph.add_edge(i - 1, i)

        # Add to hash map
        features = {
            "7-Day MA": data.iloc[i]['7-Day MA'],
            "Volatility": data.iloc[i]['Volatility'],
            "Momentum": data.iloc[i]['Momentum'],
            "RSI": data.iloc[i]['RSI'],
        }
        price_hashmap.put(i, {"price": price, "features": features})

    return price_graph, price_hashmap



# ------------------------------
# Main Program
# ------------------------------
if __name__ == "__main__":

    # Step 1: Build custom graph and hash map
    price_graph, price_hashmap = build_graph_and_hashmap(processed_data)

    
